name: üèà Football Match Predictor CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  REDIS_VERSION: "7-alpine"

jobs:
  # =============================================================================
  # CODE QUALITY & LINTING
  # =============================================================================
  code-quality:
    name: üîç Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: ÔøΩÔøΩ Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy bandit safety

      - name: üé® Code Formatting (Black)
        run: |
          echo "::group::Black Code Formatting"
          black --check --diff app/ tests/
          echo "::endgroup::"

      - name: üìã Import Sorting (isort)
        run: |
          echo "::group::Import Sorting"
          isort --check-only --diff app/ tests/
          echo "::endgroup::"

      - name: üîç Linting (flake8)
        run: |
          echo "::group::Flake8 Linting"
          flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          echo "::endgroup::"

      - name: üõ°Ô∏è Security Check (bandit)
        run: |
          echo "::group::Security Analysis"
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ -ll
          echo "::endgroup::"

      - name: üõ°Ô∏è Dependency Security (safety)
        run: |
          echo "::group::Dependency Security"
          safety check --json --output safety-report.json || true
          safety check
          echo "::endgroup::"

      - name: üìä Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # =============================================================================
  # TYPE CHECKING
  # =============================================================================
  type-checking:
    name: ÔøΩÔøΩ Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mypy types-requests types-redis

      - name: üîç Type Checking (mypy)
        run: |
          echo "::group::MyPy Type Checking"
          mypy app/ --ignore-missing-imports --no-strict-optional
          echo "::endgroup::"

  # =============================================================================
  # TESTING
  # =============================================================================
  test:
    name: ÔøΩÔøΩ Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist

      - name: üß™ Run Tests
        env:
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
          LOG_LEVEL: DEBUG
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "::group::Running Tests"
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=pytest-report.xml \
            --maxfail=5 \
            -v
          echo "::endgroup::"

      - name: üìä Upload Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            pytest-report.xml

      - name: üìà Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # =============================================================================
  # INTEGRATION TESTING
  # =============================================================================
  integration-test:
    name: üîó Integration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code-quality, type-checking, test]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-asyncio httpx

      - name: üîó Run Integration Tests
        env:
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
          LOG_LEVEL: DEBUG
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "::group::Integration Tests"
          pytest tests/test_integration/ -v --tb=short
          echo "::endgroup::"

      - name: üåê Test API Endpoints
        env:
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
          LOG_LEVEL: DEBUG
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "::group::API Testing"
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/docs || exit 1
          echo "::endgroup::"

  # =============================================================================
  # DOCKER BUILD & TEST
  # =============================================================================
  docker-build:
    name: üê≥ Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, type-checking, test]

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ÔøΩÔøΩÔ∏è Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            football-predictor:latest
            football-predictor:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üß™ Test Docker Image
        run: |
          echo "::group::Docker Image Test"
          docker run --rm -d --name test-container -p 8000:8000 \
            -e REDIS_URL=redis://host.docker.internal:6379/0 \
            -e ENVIRONMENT=test \
            -e LOG_LEVEL=DEBUG \
            football-predictor:latest
          sleep 15
          curl -f http://localhost:8000/health || exit 1
          docker stop test-container
          echo "::endgroup::"

  # =============================================================================
  # PERFORMANCE TESTING
  # =============================================================================
  performance-test:
    name: ‚ö° Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, integration-test]
    if: github.event_name == 'pull_request'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: ‚ö° Run Performance Tests
        env:
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
          LOG_LEVEL: DEBUG
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "::group::Performance Testing"
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          locust -f tests/performance/locustfile.py \
            --host=http://localhost:8000 \
            --users=10 \
            --spawn-rate=2 \
            --run-time=60s \
            --headless \
            --html=performance-report.html
          echo "::endgroup::"

      - name: üìä Upload Performance Reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: performance-report.html

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: ÔøΩÔøΩ Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [docker-build]

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîí Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: ÔøΩÔøΩ Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================
  deploy-staging:
    name: ÔøΩÔøΩ Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, integration-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ÔøΩÔøΩ Deploy to Staging
        run: |
          echo "::group::Staging Deployment"
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          echo "Staging deployment completed!"
          echo "::endgroup::"

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test, integration-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üöÄ Deploy to Production
        run: |
          echo "::group::Production Deployment"
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          echo "Production deployment completed!"
          echo "::endgroup::"

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: üì¢ Notify Success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          # Add notification logic here (Slack, Discord, etc.)

      - name: üì¢ Notify Failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # Add notification logic here (Slack, Discord, etc.)
