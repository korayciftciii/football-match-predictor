# Docker Compose configuration for Football Match Predictor
# This file defines the complete application stack with all services

version: '3.8'

services:
  # =============================================================================
  # MAIN APPLICATION SERVICE
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.11
    container_name: football-predictor-app
    ports:
      - "8000:8000"
    environment:
      # Override Redis URL for container networking
      - REDIS_URL=redis://redis:6379/0
      # Application settings
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - HOST=0.0.0.0
      - PORT=8000
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
      # Mount configuration files (optional)
      - ./config:/app/config:ro
    networks:
      - football-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.football-predictor.rule=Host(`your-domain.com`)"
      - "traefik.http.services.football-predictor.loadbalancer.server.port=8000"

  # =============================================================================
  # REDIS CACHE SERVICE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: football-predictor-redis
    ports:
      - "6379:6379"
    volumes:
      # Persistent data storage
      - redis_data:/data
      # Custom Redis configuration
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - football-network
    sysctls:
      # Optimize for Redis performance
      - net.core.somaxconn=65535
    ulimits:
      memlock: -1

  # =============================================================================
  # NGINX REVERSE PROXY (Optional)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: football-predictor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx configuration
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # SSL certificates (if using HTTPS)
      - ./ssl:/etc/nginx/ssl:ro
      # Static files (if any)
      - ./static:/var/www/static:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - football-network
    labels:
      - "traefik.enable=false"

  # =============================================================================
  # MONITORING SERVICES (Optional)
  # =============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: football-predictor-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - football-network
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: football-predictor-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - football-network
    profiles:
      - monitoring

  # =============================================================================
  # DEVELOPMENT SERVICES
  # =============================================================================
  
  # Development version with hot reload
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: football-predictor-dev
    ports:
      - "8001:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - RELOAD=true
    env_file:
      - .env
    depends_on:
      - redis
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/venv  # Exclude virtual environment
    networks:
      - football-network
    profiles:
      - development

  # Redis Commander for Redis management (development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: football-predictor-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - football-network
    profiles:
      - development

  # =============================================================================
  # TESTING SERVICES
  # =============================================================================
  
  # Test runner service
  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: football-predictor-test
    environment:
      - REDIS_URL=redis://redis-test:6379/0
      - ENVIRONMENT=test
      - LOG_LEVEL=DEBUG
    env_file:
      - .env.test
    depends_on:
      - redis-test
    volumes:
      - .:/app
      - test_reports:/app/test-reports
    networks:
      - football-network
    profiles:
      - testing
    command: pytest --cov=app --cov-report=html --cov-report=xml

  # Separate Redis instance for testing
  redis-test:
    image: redis:7-alpine
    container_name: football-predictor-redis-test
    ports:
      - "6380:6379"
    networks:
      - football-network
    profiles:
      - testing
    tmpfs:
      - /data  # Use tmpfs for faster test execution

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  # Persistent Redis data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

  # Prometheus data
  prometheus_data:
    driver: local

  # Grafana data
  grafana_data:
    driver: local

  # Test reports
  test_reports:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  football-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Basic usage:
# docker-compose up -d                    # Start production services
# docker-compose logs -f app              # View application logs
# docker-compose down                     # Stop all services

# Development:
# docker-compose --profile development up -d    # Start with development services
# docker-compose exec app-dev bash              # Access development container

# Testing:
# docker-compose --profile testing up --abort-on-container-exit test

# Monitoring:
# docker-compose --profile monitoring up -d     # Start with monitoring stack

# Scaling:
# docker-compose up -d --scale app=3            # Scale application to 3 instances

# Updates:
# docker-compose pull                           # Pull latest images
# docker-compose up -d --force-recreate         # Recreate containers

# Cleanup:
# docker-compose down -v                        # Remove containers and volumes
# docker system prune -a                        # Clean up Docker system

# =============================================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# =============================================================================

# For different environments, create override files:
# - docker-compose.override.yml (default override)
# - docker-compose.prod.yml (production)
# - docker-compose.staging.yml (staging)
# - docker-compose.dev.yml (development)

# Usage with overrides:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d